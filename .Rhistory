inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(AlzheimerDisease)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
str(training)
str(training[,57:68])
str(training[,58:69])
preProcess(training[,58:69], method='pca')
pca <- preProcess(training[,58:69], method='pca')
plot(pca)
predict(training[,58:69],pca)[,1]
predict(pca,training[,58:69])[,1]
predict(pca,training[,58:69])
pca.p <- predict(pca,training[,58:69])
plot(pca.p)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
concrete$Superplasticizer
par(mfcol=c(1,2))
hist(log(concrete$Superplasticizer))
hist(concrete$Superplasticizer)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=F)
head(testIndex)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
require(Hmisc)
plot(training$Compre
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
cut2(training$FlyAsh
)
plot(training$CompressiveStrength,pch=1,col=cut2(training$Age,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Cement,m=20))
pca <- preProcess(training[,58:69], method='pca', pcaComp=2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training[,58:69])
pca <- preProcess(training[,58:69], method='pca', pcaComp=2)
pca.p <- predict(pca,training[,58:69])
plot(pca.p)
pca.p
pca <- preProcess(training[,58:69], method='pca')
pca.p <- predict(pca,training[,58:69])
plot(pca.p)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training[,58:69])
pca <- preProcess(training[,58:69], method='pca')
pca.p <- predict(pca,training[,58:69])
plot(pca.p)
prcomp(training[,58:69])
pca$rotation
plot(prcomp(training[,58:69]))
svd1 <- svd(prcomp(training[,58:69]))
svd1 <- svd(scale(prcomp(training[,58:69])))
scale(prcomp(training[,58:69]))
svd1 <- svd(scale(training[,58:69]))
svd1
plot(svd1$d)
plot(svd1$d^2/sum(svd1$d^2))
svd1 <- svd(training[,58:69])
plot(svd1$d^2/sum(svd1$d^2))
scale
svd1 <- svd(scale(training[,58:69]))
plot(svd1$d^2/sum(svd1$d^2))
pca[,1]
pca
pca$rotation
plot(svd1$d^2/sum(svd1$d^2))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
require(e1071)
fit <- svm(CompressiveStrength~., training)
pred <- predict(fit, testing)
# confusionMatrix(as.vector(pred), testing$CompressiveStrength)
sum(sqrt((pred-testing$CompressiveStrength)^2))
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
require(e1071)
fit <- svm(CompressiveStrength~., training)
pred <- predict(fit, testing)
# confusionMatrix(as.vector(pred), testing$CompressiveStrength)
sum(sqrt((pred-testing$CompressiveStrength)^2))
sqrt(sum((pred-testing$CompressiveStrength)^2))
sqrt(107.44)
?colSums
?dgamma
?lm
?predict
?dgamma
?predict
?dgamma
pnorm(70, mean=80, sd=10, lower.tail=T)
pnorm(70, mean=80, sd=10, lower.tail=F)
qnorm(.95, mean=1000, sd=75)
qnorm(.95, mean=1000, sd=75, lower.tail = F)
qnorm(.95, mean=1000, sd=75, lower.tail = F)
T
qnorm(.95, mean=1000, sd=75, lower.tail = T)
qnorm(.95, mean=1100, sd=75, lower.tail = T)
qnorm(.95, mean=1100, sd=75, lower.tail = F)
qnorm(.95, mean=1100, sd=75, lower.tail = T)
pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE)
ppois(2, lambda = 500 * 0.01)
pbinom(2, size = 500, prob = 0.01)
ppois(10, lambda = 5 * 3)
qnorm(.95, mean=1100, sd=75/sqrt(100), lower.tail = T)
round(pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3
)# 9
round(pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(.5, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(qnorm(.5, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(qnorm(1000, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(1000, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(1, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(0.5, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(0.1, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(0.9, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(0.9, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(0.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
51
round(pnorm(0.51, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(0.5, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
setwd("C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Data-Science-Statistical-Inference")
k <- 1000
xvals <- seq(-5, 5, length = k)
xvals
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
?dt
dnorm(xvals)
require(ggplot)
require(ggplot2)
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
require(manipulate)
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
png('t_distribution.png')
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
dev.off()
pvals <- seq(.5, .99, by = .01)
myplot2 <- function(df){
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),
p = pvals)
g <- ggplot(d, aes(x= n, y = t))
g <- g + geom_abline(size = 2, col = "lightblue")
g <- g + geom_line(size = 2, col = "black")
g <- g + geom_vline(xintercept = qnorm(0.975))
g <- g + geom_hline(yintercept = qt(0.975, df))
g
}
manipulate(myplot2(df), df = slider(1, 20, step = 1))
png('t_distribution2.png')
manipulate(myplot2(df), df = slider(1, 20, step = 1))
dev.off()
data(sleep)
head(sleep)
x1 <- sleep$extra[sleep$group == 1]
x2 <- sleep$extra[sleep$group == 2]
n1 <- length(x1)
n2 <- length(x2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(x1) - mean(x2)
semd <- sp * sqrt(1 / n1 + 1/n2)
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd
t.test(x1, x2, paired = FALSE, var.equal = TRUE)$conf
t.test(x1, x2, paired = TRUE)$conf
plot(c(0.5, 2.5), range(x1, x2), type = "n", frame = FALSE, xlab = "group", ylab = "Extra", axes = FALSE)
axis(2)
axis(1, at = 1 : 2, labels = c("Group 1", "Group 2"))
for (i in 1 : n1) lines(c(1, 2), c(x1[i], x2[i]), lwd = 2, col = "red")
for (i in 1 : n1) points(c(1, 2), c(x1[i], x2[i]), lwd = 2, col = "black", bg = "salmon", pch = 21, cex = 3)
plot(c(0.5, 2.5), range(x1, x2), type = "n", frame = FALSE, xlab = "group", ylab = "Extra", axes = FALSE)
plot(c(0.5, 2.5), range(x1, x2), type = "n", frame = FALSE, xlab = "group", ylab = "Extra", axes = FALSE)
axis(2)
axis(1, at = 1 : 2, labels = c("Group 1", "Group 2"))
for (i in 1 : n1) lines(c(1, 2), c(x1[i], x2[i]), lwd = 2, col = "red")
for (i in 1 : n1) points(c(1, 2), c(x1[i], x2[i]), lwd = 2, col = "black", bg = "salmon", pch = 21, cex = 3)
png('ttest.png')
plot(c(0.5, 2.5), range(x1, x2), type = "n", frame = FALSE, xlab = "group", ylab = "Extra", axes = FALSE)
axis(2)
axis(1, at = 1 : 2, labels = c("Group 1", "Group 2"))
for (i in 1 : n1) lines(c(1, 2), c(x1[i], x2[i]), lwd = 2, col = "red")
for (i in 1 : n1) points(c(1, 2), c(x1[i], x2[i]), lwd = 2, col = "black", bg = "salmon", pch = 21, cex = 3)
dev.off()
plot(c(0.5, 2.5), range(x1, x2), type = "n", frame = FALSE, xlab = "group", ylab = "Extra", axes = FALSE)
axis(2)
axis(1, at = 1 : 2, labels = c("Group 1", "Group 2"))
for (i in 1 : n1) lines(c(1, 2), c(x1[i], x2[i]), lwd = 2, col = "red")
for (i in 1 : n1) points(c(1, 2), c(x1[i], x2[i]), lwd = 2, col = "black", bg = "salmon", pch = 21, cex = 3)
x1
x2
n1
n2
sp
md <- mean(x1) - mean(x2)
md
semd
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd
t.test(x1, x2, paired = FALSE, var.equal = TRUE)$conf
t.test(x1, x2, paired = TRUE)$conf
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
g1
x1
sleep
difference <- g2 - g1
difference
mn <- mean(difference); s <- sd(difference); n <- 10
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
t.test(x1, x2, paired = FALSE, var.equal = TRUE)$conf
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
library(datasets); data(ChickWeight); library(reshape2)
head(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
head(ChickWeight)
head(wideCW)
names(wideCW)[-(1 : 2)]
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
names(wideCW)[-(1 : 2)]
library(dplyr)
install.package('dplyr')
install.packages('dplyr')
library(dplyr)
wideCW <- mutate(wideCW, gain = time21 - time0)
head(wideCW)
?mutate
head(ChickWeight)
g1 <- ggplot(ChickWeight, aes(x=Time, y=weight), color=Diet)
g1 <- geom_line()
g1 <- ggplot(ChickWeight, aes(x=Time, y=weight), color=Diet)
g1 + geom_line()
g1 <- ggplot(ChickWeight, aes(x=Time, y=weight), color=Diet, facet=Diet)
g1 + geom_line()
ggplot(ChickWeight, aes(x=Time, y=weight), color=Diet, facet=Diet)
g1 <- ggplot(ChickWeight, aes(x=Time, y=weight), color=Diet, facet=Diet)
g1 + geom_line()
g1 + geom_line() + facet_grid(Diet)
g1 + geom_line() + facet_grid(ChickWeight$Diet)
g1 + geom_line() + facet_grid(.~ChickWeight$Diet)
g1 <- ggplot(ChickWeight, aes(x=Time, y=weight))
g1 + geom_line()
g1 + geom_line() + facet_grid(.~ChickWeight$Diet)
g1 + geom_line() + facet_grid(ChickWeight$Diet~.)
g1 + geom_point() + facet_grid(ChickWeight$Diet~.)
g1 + geom_point()
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
g1 <- ggplot(ChickWeight, aes(x=Time, y=weight))
g1 + geom_area
g1 + geom_area()
g1 + geom_line()
g1 + geom_point()
g1 + geom_point() + geom_line()
setwd("C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Data-Science-Statistical-Inference")
library(UsingR); data(father.son)
t.test(father.son$sheight - father.son$fheight)
# two groups
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE,
logical.return = FALSE, warn.conflicts = TRUE, quietly = FALSE,
library(UsingR); data(father.son)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
wideCW14
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)
pt(0.8, 15, lower.tail = FALSE)
choose(8, 7) * 0.5^8 + choose(8, 8) * 0.5^8
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
ppois(9, 5, lower.tail = FALSE)
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)
t.test(father.son$sheight - father.son$fheight)
library(datasets)
data(mtcars)
head(mtcars)
t.test(mpg)
t.test(mtcars$mpg)
t.test(mtcars$mpg)$conf.int
round(t.test(mtcars$mpg)$conf.int)
round(qt(.975,df=8)*1/3,2)
round(qt(.025,df=8)*1/3,2)
head(mtcars)
round(t.test(mtcars$mpg~mtcars$cyl)$conf.int,1)
a <- mtcars[which(mtcars$cyl %in% c(4,6),)]
a <- mtcars[which(mtcars$cyl %in% c(4,6)),]
round(t.test(a$mpg~a$cyl)$conf.int,1)
round(t.test(a$mpg~a$cyl,var.equal=T)$conf.int,1)
m4 <- mtcars$mpg[mtcars$cyl == 4]
m6 <- mtcars$mpg[mtcars$cyl == 6]
confint <- as.vector(t.test(m4, m6, var.equal = TRUE)$conf.int)
confint
m6
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
spsq <- ( (n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2)
spsq
qt(.95,df=8)*30/3
n <- 9
x<-1100
s <- 30
n <- 9
x+c(-1,1)*1.68*s/sqrt(n)
x+c(-1,1)*1.68*s/sqrt(n-1)
x+c(-1,1)*1.68*s/sqrt(n)
round(qt(.975, df = 8) * 2 / 3, 2)
round(qt(.975, df = 8) * -2 / 3, 2)
round(qt(.975, df = 8) * sqrt(2) / 3, 2)
round(qt(.95, df = 8) * 2 / 3, 2)
round(qt(.975, df = 8) * 2 / 3, 2)
round(qt(.975, df = 8) * 0.77 / 3, 2)
round(qt(.975, df = 8) * 1 / 3, 2)
-2*3/qt(.975, df = 8)
?qt
2*3/qt(.95, df = 8)
2*3/qt(.975, df = 8)
var <- .6
mean <- 3
var <- .6
var.o <- .68
mean.a <- mean.o-mean
var.a <- var.o-var
mean.o <- 5
mean <- 3
var <- .6
mean.o <- 5
var.o <- .68
mean.a <- mean.o-mean
var.a <- var.o-var
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
spsq <- ( (n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2)
spsq
n <- n.o <- 10
mean.a
mean.a+c(-1,1)*sqrt(.64/9)
mean.a+c(-1,1)*sqrt(var.o/9)
mean.a+c(-1,1)*sqrt(var.a/9)
mean.a+c(-1,1)*var/sqrt(n-1)
mean.a+c(-1,1)*0.08/sqrt(n-1)
mean.a+c(-1,1)*0.08/sqrt(n-1)
mean.a+c(-1,1)*0.8/sqrt(n-1)
4+c(-1,1)*0.8/sqrt(n-1)
2+c(-1,1)*0.8/sqrt(n-1)
2+c(-1,1)*0.8/sqrt(19)
2+c(-1,1)*0.8/sqrt(9)
mean+c(-1,1)*var/sqrt(9)
mean.o+c(-1,1)*var.o/sqrt(n.o)
mean+c(-1,1)*var/sqrt(n)
new <- mean+c(-1,1)*var/sqrt(n)
old <- mean.o+c(-1,1)*var.o/sqrt(n.o)
new-old
new <- mean+c(-1,1)*sqrt(var/n)
old <- mean.o+c(-1,1)*sqrt(var.o/n.o)
new-old
old <- mean.o+c(-1,1)*sqrt(var.o/9)
new <- mean+c(-1,1)*sqrt(var/9)
new-old
old
new
?norm
?pnprm
?pnorm
new.data <- rnorm(n,mean,sqrt(var))
new.data
set.seed(1234)
new.data <- rnorm(n,mean,sqrt(var))
old.data <- rnorm(n.o,mean.o,sqrt(var.o))
old.data
t.test(new.data,old.data)
t.test(new.data,old.data, var.equal = T)
t.test(new.data,old.data, var.equal = F)
t.test(new.data,old.data, var.equal = T, pairs=T)
t.test(new.data,old.data, var.equal = T, pairs=F)
n.new <- n.old <- 100
avg.new <- 4
sd.new <- 0.5
avg.old <- 6
sd.old <- 2
treat.avg <- -3
placebo.avg <- 1
treat.sd <- 1.5
placebo.sd <- 1.8
n<-9
treat.data <- rnorm(n, treat.avg, treat.sd)
placebo.data <- rnorm(n, placebo.avg,placebo.sd)
treat.data
placebo.data
t.test(treat.data-placebo.data)
t.test(treat.data-placebo.data,conf.level = .9)
t.test(treat.data,placebo.data,conf.level = .9)
t.test(treat.data-placebo.data,conf.level = .9,var.equal = T)
t.test(treat.data-placebo.data,conf.level = .9)
-4.023737+1.822361
x<-1100
s <- 30
n <- 9
x+c(-1,1)*1.68*s/sqrt(n)
sp <- sqrt((8*30^2)/8)
sp
x + c(-1,1)*qt(.95, 18)*sp*(1/9)^.5
x<-1100
s <- 30
n <- 9
x+c(-1,1)*1.68*s/sqrt(n)
x + c(-1,1)*qt(.95, 18)*sp*(30/9)^.5
x + c(-1,1)*qt(.95, 9)*sp*(30/9)^.5
x + c(-1,1)*qt(.95, 9)*sp*(1/9)^.5
x + c(-1,1)*qt(.975, 9)*sp*(1/9)^.5
x<-1100
s <- 30
n <- 9
x+c(-1,1)*qt(.975,18)*s/sqrt(n)
x+c(-1,1)*qt(.975,18)*s/sqrt(n-1)
x+c(-1,1)*qt(.975,18)*s/sqrt(2n-2)
x+c(-1,1)*qt(.975,18)*s/sqrt(2*n-2)
x+c(-1,1)*qt(.975,18)*sqrt(s/(n-1))
x+c(-1,1)*qt(.975,18)*sqrt((n*s^2)/n)*(1/n)^.5
sp <- sqrt((9*30^2)/9)
x + c(-1,1)*qt(.975, 9)*sp*(1/9)^.5
x<-1100
s <- 30
n <- 9
x+c(-1,1)*qt(.975,18)*sqrt((n*s^2)/n)*(1/n)^.5
x+c(-1,1)*qt(.975,9)*sqrt((n*s^2)/n)*(1/n)^.5
