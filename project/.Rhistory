print(rf)
attributes(rf)
plot(rf)
png('random_forest.png')
plot(rf)
dev.off()
importance(rf)
varImpPlot(rf)
irisPred <- predict(rf, newdata=testData)
table(irisPred, testData$Species)
plot(margin(rf, testData$Species))
png('random_forest_2.png')
plot(margin(rf, testData$Species))
dev.off()
function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE,
library(fpc)
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\ata_Mining_Work_Space\\rdatamining')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData
diagnosis
predictors
head(diagnosis)
head(predictors)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(testIndex)
testIndex = createDataPartition(diagnosis, p = 0.50,list=T)
head(testIndex)
head(testIndex)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
require(Hmisc)
a <- cut2(inTrain)
a
concrete$a <- cut2(inTrain)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
concrete$SuperPlasticizer
concrete$SuperPlasticizer
colnames(concrete)
concrete$Superplasticizer
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer))
hist(concrete$Superplasticizer)
par(mfcol=c(1,2))
hist(log(concrete$Superplasticizer))
hist(concrete$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(AlzheimerDisease)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
str(training)
str(training[,57:68])
str(training[,58:69])
preProcess(training[,58:69], method='pca')
pca <- preProcess(training[,58:69], method='pca')
plot(pca)
predict(training[,58:69],pca)[,1]
predict(pca,training[,58:69])[,1]
predict(pca,training[,58:69])
pca.p <- predict(pca,training[,58:69])
plot(pca.p)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
concrete$Superplasticizer
par(mfcol=c(1,2))
hist(log(concrete$Superplasticizer))
hist(concrete$Superplasticizer)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=F)
head(testIndex)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
require(Hmisc)
plot(training$Compre
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
cut2(training$FlyAsh
)
plot(training$CompressiveStrength,pch=1,col=cut2(training$Age,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Cement,m=20))
pca <- preProcess(training[,58:69], method='pca', pcaComp=2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training[,58:69])
pca <- preProcess(training[,58:69], method='pca', pcaComp=2)
pca.p <- predict(pca,training[,58:69])
plot(pca.p)
pca.p
pca <- preProcess(training[,58:69], method='pca')
pca.p <- predict(pca,training[,58:69])
plot(pca.p)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training[,58:69])
pca <- preProcess(training[,58:69], method='pca')
pca.p <- predict(pca,training[,58:69])
plot(pca.p)
prcomp(training[,58:69])
pca$rotation
plot(prcomp(training[,58:69]))
svd1 <- svd(prcomp(training[,58:69]))
svd1 <- svd(scale(prcomp(training[,58:69])))
scale(prcomp(training[,58:69]))
svd1 <- svd(scale(training[,58:69]))
svd1
plot(svd1$d)
plot(svd1$d^2/sum(svd1$d^2))
svd1 <- svd(training[,58:69])
plot(svd1$d^2/sum(svd1$d^2))
scale
svd1 <- svd(scale(training[,58:69]))
plot(svd1$d^2/sum(svd1$d^2))
pca[,1]
pca
pca$rotation
plot(svd1$d^2/sum(svd1$d^2))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
require(e1071)
fit <- svm(CompressiveStrength~., training)
pred <- predict(fit, testing)
# confusionMatrix(as.vector(pred), testing$CompressiveStrength)
sum(sqrt((pred-testing$CompressiveStrength)^2))
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
require(e1071)
fit <- svm(CompressiveStrength~., training)
pred <- predict(fit, testing)
# confusionMatrix(as.vector(pred), testing$CompressiveStrength)
sum(sqrt((pred-testing$CompressiveStrength)^2))
sqrt(sum((pred-testing$CompressiveStrength)^2))
sqrt(107.44)
?colSums
?dgamma
?lm
?predict
?dgamma
?predict
?dgamma
pnorm(70, mean=80, sd=10, lower.tail=T)
pnorm(70, mean=80, sd=10, lower.tail=F)
qnorm(.95, mean=1000, sd=75)
qnorm(.95, mean=1000, sd=75, lower.tail = F)
qnorm(.95, mean=1000, sd=75, lower.tail = F)
T
qnorm(.95, mean=1000, sd=75, lower.tail = T)
qnorm(.95, mean=1100, sd=75, lower.tail = T)
qnorm(.95, mean=1100, sd=75, lower.tail = F)
qnorm(.95, mean=1100, sd=75, lower.tail = T)
pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE)
ppois(2, lambda = 500 * 0.01)
pbinom(2, size = 500, prob = 0.01)
ppois(10, lambda = 5 * 3)
qnorm(.95, mean=1100, sd=75/sqrt(100), lower.tail = T)
round(pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3
)# 9
round(pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(.5, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(qnorm(.5, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(qnorm(1000, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(1000, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(1, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(0.5, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(0.1, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(0.9, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
round(pnorm(0.9, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(0.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
51
round(pnorm(0.51, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
round(pnorm(0.5, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE), 3)
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Data-Science-Statistical-Inference\\project')
lambda <- 0.2
n <- 40
itr <- 1000
set.seed(1234)
?replicate
replicate(itr, rexp(n,lambda))
sim <- replicate(itr, rexp(n,lambda))
sim.mean <- sapply(1:itr, mean(sim[,i]))
sim.mean <- sapply(1:itr, function(i) mean(sim[,i]))
sim.mean
mean(sim.mean)
s1 <- data.frame(c(mean(sim.mean),1/lambda),row.names=c('',''))
s1 <- data.frame(c(mean(sim.mean),1/lambda))
s1
s1 <- data.frame('mean'=c(mean(sim.mean),1/lambda), row.names=c('calculated','theoretical'))
s1
g <- ggplot(sim.mean)
library(ggplot2)
g <- ggplot(sim.mean)
g <- ggplot(as.data.frame(sim.mean))
g
as.data.frame(sim.mean)
head(as.data.frame(sim.mean))
sim.mean <- as.data.frame(sim.mean)
g <- ggplot(sim.mean,aes(x=sim.mean))
g
g + geom_histogram()
g + geom_histogram(alpha=.6)
g + geom_histogram(alpha=.8)
g + geom_histogram(color='blue',alpha=.8)
g + geom_histogram(fill='blue',alpha=.8)
g + geom_histogram(fill='lightblue',alpha=.8)
g + geom_histogram(fill='lightblue',alpha=.7)
g + geom_histogram(fill='lightblue',alpha=.7) + geom_vline(data=s1, aes(xintercept=sim.mean), color=sim.mean, linetype=sim.mean)
s1
g + geom_histogram(fill='lightblue',alpha=.7) + geom_vline(data=s1, aes(xintercept=mean), color=mean, linetype=mean)
g + geom_histogram(fill='lightblue',alpha=.7) + geom_vline(data=s1, aes(xintercept=mean), color=c('blue','red'), linetype=mean)
```{r, warning=FALSE, message=FALSE, fig.height=4,fig.width=8,fig.align='center'}
sim.mean
sim.sd <- sd(sim.mean)
sim.mean <- sapply(1:itr, function(i) mean(sim[,i]))
sim.mean <- as.data.frame(sim.mean)
sim.sd <- sd(sim.mean)
sim.mean <- sapply(1:itr, function(i) mean(sim[,i]))
s1 <- data.frame('mean'=c(mean(sim.mean),1/lambda), row.names=c('calculated','theoretical'))
s1
sim.sd <- sd(as.vector(sim.mean))
sim.sd
sim.var <- var(as.vector(sim.mean))
sim.var
sim.var <- var(as.vector(sim.mean))/n
sim.var
sim.var <- var(as.vector(sim.mean))/itr
sim.var
sim.var <- var(as.vector(sim.mean))
theo.sd <- (1/lambda * 1/sqrt(n))
theo.sd
theo.var <- theo.sd ^ 2
theo.var
sim.sd <- sd(as.vector(sim.mean))
sim.var <- var(as.vector(sim.mean))
theo.sd <- (1/lambda * 1/sqrt(n))
theo.var <- theo.sd ^ 2
s2 <- data.frame('sd'=c(sim.sd, theo.sd), 'var'=c(sim.var,theo.var), row.names=c('calculated','theoretical'))
s2
sim.mean <- as.data.frame(sim.mean)
g <- ggplot(sim.mean,aes(x=sim.mean))
g + geom_histogram(aes(y = ..density..),fill='lightblue',alpha=.8) +
geom_vline(data=s1, aes(xintercept=mean), color=c('blue','red')) +
#     geom_density(alpha=.1, fill='red') +
stat_function(fun=dnorm, args=list(mean=mean(sim.mean), sd=sim.sd),color = "blue", size = 1.5)
mean(sim.mean)
sim.mean
# sim.mean <- as.data.frame(sim.mean)
g <- ggplot(sim.mean,aes(x=sim.mean))
g + geom_histogram(aes(y = ..density..),fill='lightblue',alpha=.8) +
geom_vline(data=s1, aes(xintercept=mean), color=c('blue','red')) +
#     geom_density(alpha=.1, fill='red') +
stat_function(fun=dnorm, args=list(mean=mean(sim.mean), sd=sim.sd),color = "blue", size = 1.5)
sim.mean <- as.data.frame(sim.mean)
g <- ggplot(sim.mean,aes(x=sim.mean))
g + geom_histogram(aes(y = ..density..),fill='lightblue',alpha=.8) +
geom_vline(data=s1, aes(xintercept=mean), color=c('blue','red')) +
#     geom_density(alpha=.1, fill='red') +
stat_function(fun=dnorm, args=list(mean=mean(as.vector(sim.mean)), sd=sim.sd),color = "blue", size = 1.5)
mean(as.vector(sim.mean))
as.vector(sim.mean)
sd(as.vector(sim.mean))
class(sim.mean)
mean=mean(sim.mean[,1]
)
mean
sim.mean <- as.data.frame(sim.mean)
g <- ggplot(sim.mean,aes(x=sim.mean))
g + geom_histogram(aes(y = ..density..),fill='lightblue',alpha=.8) +
geom_vline(data=s1, aes(xintercept=mean), color=c('blue','red')) +
geom_density(alpha=.1, fill='red') +
stat_function(fun=dnorm, args=list(mean=mean(sim.mean[,1]), sd=sim.sd),color = "darkblue")
pt(1.96,39)
itr
sapply(1:itr, function(i){
coverage[i,]<- mean(sim[,i]+c(-1.96,1.96)*sd[,i])/sqrt(n))
}
sapply(1:itr, function(i){
coverage[i,]<- mean(sim[,i]+c(-1.96,1.96)*sd[,i])/sqrt(n))
})
sapply(1:itr, function(i){
coverage[i,]<- mean(sim[,i]+c(-1.96,1.96)*sd[,i])/sqrt(n))
})
sapply(1:itr, function(i){
coverage[i,]<- mean(sim[,i])+c(-1.96,1.96)*sim[,i])/sqrt(n)
}
sapply(1:itr, function(i){
coverage[i,]<- mean(sim[,i])+c(-1.96,1.96)*sd(sim[,i])/sqrt(n)
})
coverage <- data.frame()
coverage <- data.frame('Low','High')
coverage
coverage <- data.frame('Low'=NA,'High'=NA)
coverage
sapply(1:itr, function(i){
coverage[i,]<- mean(sim[,i])+c(-1.96,1.96)*sd(sim[,i])/sqrt(n)
})
coverage <- data.frame('Low'=NA,'High'=NA)
sapply(1:itr, function(i){
coverage[,i]<- mean(sim[,i])+c(-1.96,1.96)*sd(sim[,i])/sqrt(n)
})
coverage[i,]<- mean(sim[,i])+c(-1.96,1.96)*sd(sim[,i])/sqrt(n)
coverage <- data.frame('Low'=NA,'High'=NA)
sapply(1:itr, function(i){
coverage[i,]<- mean(sim[,i])+c(-1.96,1.96)*sd(sim[,i])/sqrt(n)
})
coverage <- data.frame('Low'=NA,'High'=NA)
coverage[1,]<- mean(sim[,1])+c(-1.96,1.96)*sd(sim[,1])/sqrt(n)
coverage <- data.frame('Low'=NA,'High'=NA)
coverage[1,]<- mean(sim[,1])+c(-1.96,1.96)*sd(sim[,1])/sqrt(n)
coverage
coverage[2,]<- mean(sim[,2])+c(-1.96,1.96)*sd(sim[,2])/sqrt(n)
coverage
coverage[3,]<- mean(sim[,3])+c(-1.96,1.96)*sd(sim[,3])/sqrt(n)
coverage
coverage <- data.frame('Low'=NA,'High'=NA)
coverage <- sapply(1:itr, function(i){
coverage[i,]<- mean(sim[,i])+c(-1.96,1.96)*sd(sim[,i])/sqrt(n)
})
coverage
coverage <- data.frame('Low'=NA,'High'=NA)
coverage <- sapply(1:itr, function(i){
coverage[i,]<- mean(sim[,i])+c(-1.96,1.96)*sd(sim[,i])/sqrt(n)
}
)
coverage
coverage <- data.frame('Low'=NA,'High'=NA)
coverage <- for(i in 1:itr){
coverage[i,]<- mean(sim[,i])+c(-1.96,1.96)*sd(sim[,i])/sqrt(n)
}
coverage
coverage <- data.frame('Low'=NA,'High'=NA)
for(i in 1:itr){
coverage[i,]<- mean(sim[,i])+c(-1.96,1.96)*sd(sim[,i])/sqrt(n)
}
coverage
nrow(coverage[which(coverage$Low < 5 & coverage$High > 5),])
Coverage <- nrow(coverage[which(coverage$Low < 5 & coverage$High > 5),])/itr
Coverage
library(hnit)
library(knitr)
knit2pdf('Project/Project_One_Simulation.Rmd')
knit2pdf('project/Project_One_Simulation.Rmd')
getwd()
knit2pdf('Project_One_Simulation.Rmd')
knit2html('Project_One_Simulation.Rmd')
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Data-Science-Statistical-Inference\\project')
library(ggplot2)
library(datasets)
data(ToothGrowth)
head(ToothGrowth)
table(ToothGrowth[,2])
table(ToothGrowth[,3])
table(ToothGrowth[,1])
g1 <- ggplot(ToothGrowth, aex(x=factor(dose),y=len,fill=factor(dose)))
g1 <- ggplot(ToothGrowth, aes(x=factor(dose),y=len,fill=factor(dose)))
g1 + geom_boxplot()
g1 + geom_boxplot(notch=T)
g1 + geom_boxplot(notch=T,notchwidth=.2)
g1 + geom_boxplot(notch=T) + theme_bg()
g1 + geom_boxplot(notch=T) + theme_bw()
g1 + geom_boxplot(notch=T) + facet_wrap(~supp)
g1 + geom_boxplot(notch=T) + facet_grid(~supp)
g1 + geom_boxplot(notch=T) + facet_grid(supp~)
g1 + geom_boxplot(notch=T) + facet_grid(.~supp)
g1 + geom_boxplot(notch=T) + facet_grid(.~supp) +
scale_x_discrete("Dosage in mg") +
scale_y_continuous("Length of Teeth")
g1 <- ggplot(ToothGrowth, aes(x=factor(dose),y=len,fill=factor(dose)))
g1 + geom_boxplot(notch=F) + facet_grid(.~supp) +
scale_x_discrete("Dosage in mg") +
scale_y_continuous("Length of Teeth") +
title("Exploratory data analyses 1")
head(ToothGrowth)
summary(ToothGrowth)
library(reshape2)
table(ToothGrowth$len, ToothGrowth$dose)
summary(ToothGrowth)
table(ToothGrowth$supp, ToothGrowth$dose)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
summary(ToothGrowth)
table(ToothGrowth$supp, ToothGrowth$dose)
table(ToothGrowth)
library(UsingR); data(father.son)
t.test(father.son$sheight - father.son$fheight)
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW
wideCW <- mutate(wideCW,
gain = time21 - time0
)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)
t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth, alternative='g')
t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
supp.t1 <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
supp.t2 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
supp.t1$p
supp.t1$pv
supp.t1$p.value
supp.t1$conf
c(supp.t1$conf[1]
)
supp.result <- data.frame("p-value"=c(supp.t1$p.value, supp.t2$p.value),"Conf-Low"=c(supp.t1$conf[1],supp.t2$conf[1]),
"Conf-High"=c(supp.t1$conf[2],supp.t2$conf[2]), row.names=c("Equal Var","Unequal Var"))
supp.result
dose.t1 <- t.test(len~dose, paired=F, var.equal=T, data=ToothGrowth)
table(ToothGrowth$dose)
dose.05 <- ToothGrowth[which(ToothGrowth$dose==.5),]
dose.05
dose.10 <- ToothGrowth[which(ToothGrowth$dose==1),]
dose.20 <- ToothGrowth[which(ToothGrowth$dose==2),]
dose.20
dose.10
dose0510.t1 <- t.test(dose.05, dose.10, paired=F, var.equal=T)
dose.05 <- ToothGrowth[,1][which(ToothGrowth$dose==.5),]
dose.05 <- ToothGrowth$len[which(ToothGrowth$dose==.5),]
dose.05 <- ToothGrowth[which(ToothGrowth$dose==.5),1]
dose.05
dose.10 <- ToothGrowth[which(ToothGrowth$dose==1),1]
dose.20 <- ToothGrowth[which(ToothGrowth$dose==2),1]
dose0510.t1 <- t.test(dose.05, dose.10, paired=F, var.equal=T)
dose0510.t1
dose0510.t2 <- t.test(dose.05, dose.10, paired=F, var.equal=T)
dose0510.t2 <- t.test(dose.05, dose.10, paired=F, var.equal=F)
dose0510.t2
dose0510.t1
dose0510.result <- data.frame("p-value"=c(dose0510.t1$p.value, dose0510.t2$p.value),"Conf-Low"=c(dose0510.t1$conf[1],dose0510.t2$conf[1]),"Conf-High"=c(dose0510.t1$conf[2],dose0510.t2$conf[2]), row.names=c("Equal Var","Unequal Var"))
dose0510.result
dose0510.result <- data.frame("p-value"=c(dose0510.t1$p.value, dose0510.t2$p.value),"Conf-Low"=c(dose0510.t1$conf[1],dose0510.t2$conf[1]),"Conf-High"=c(dose0510.t1$conf[2],dose0510.t2$conf[2]), row.names=c("Equal Var","Unequal Var"), "Dose"="0.5 to 1")
dose0510.result
dose0520.t1 <- t.test(dose.05, dose.20, paired=F, var.equal=T)
dose0520.t2 <- t.test(dose.05, dose.20, paired=F, var.equal=F)
dose0520.result <- data.frame("p-value"=c(dose0520.t1$p.value, dose0520.t2$p.value),"Conf-Low"=c(dose0520.t1$conf[1],dose0520.t2$conf[1]),"Conf-High"=c(dose0520.t1$conf[2],dose0520.t2$conf[2]), row.names=c("Equal Var","Unequal Var"), "Dose"="0.5 to 2")
dose0520.t1
dose0520.t2
dose1020.t1 <- t.test(dose.10, dose.20, paired=F, var.equal=T)
dose1020.t2 <- t.test(dose.10, dose.20, paired=F, var.equal=F)
dose1020.result <- data.frame("p-value"=c(dose1020.t1$p.value, dose1020.t2$p.value),"Conf-Low"=c(dose1020.t1$conf[1],dose1020.t2$conf[1]),"Conf-High"=c(dose1020.t1$conf[2],dose1020.t2$conf[2]), row.names=c("Equal Var","Unequal Var"), "Dose"="1 to 2")
dose.result <- rbind(dose0510.result,dose0520.result,dose1020.result)
dose.result
dose1020.t2
